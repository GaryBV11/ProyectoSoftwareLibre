// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


//Seguridad
enum rol {
cliente
mesero
administrador
}

model usuario {
id String @id 
nombre String
apellido1 String
apellido2 String
email String @unique
contrasena String 
telefono String
deleted Boolean @default(false)
rol rol @default(cliente)
idSede Int?
sede sede? @relation(fields: [idSede],references: [id])
comandas comanda[]
}

//Restaurantes

enum categoriaProducto {
platoPrincipal
bebida
entrada
}

model sede {
id Int @id @default(autoincrement())
nombre String
//productos sedeProducto[]
productos producto[]
mesas mesa[]
usuarios usuario[]
}

model producto {
id Int @id @default(autoincrement())
descripcion String
precio Decimal
ingredientes String
deleted Boolean @default(false)
categoria categoriaProducto
//sedes sedeProducto[]
estado Boolean
imagenURL String
sedes sede[]
comandas detalleComanda[]
}

//model sedeProducto {
//idSede Int
//idProducto Int
//sede sede @relation(fields: [idSede],references: [id])
//producto producto @relation(fields: [idProducto],references: [id])
//@@id([idProducto, idSede])
//}
 enum estadoMesa {
  libre
  inactiva
  reservada
  ocupada
cuentaPendiente
comandaRegistrada
}

model mesa {
id Int @id @default(autoincrement())
codigo String
estado estadoMesa
capacidad Int
idSede Int
comandas comanda[]
sede sede @relation(fields: [idSede],references: [id])
}

enum estadoComanda {
  cancelada
  registrado //cliente aparta
  enProceso //est√° atendiendose
  pendiente //Cliente llego y no ha sido atendido
  entregada //finalizada pagado
  porPagar //entregado sin pagar
}

model comanda {
id Int @id @default(autoincrement())
idUsuario String
estado estadoComanda  
direccion String?
nota String?
fecha  DateTime @updatedAt
subTotal Decimal
impuesto Decimal
total Decimal
idMesa Int?
mesa mesa? @relation(fields: [idMesa],references: [id])
usuario usuario @relation(fields: [idUsuario],references: [id])
detallesComanda detalleComanda[]
detallesPago detallePago[]
}

model detallePago { //ojo llave simple pasar a compuesta
id Int @id @default(autoincrement())
tipoPago metodoPago
monto Decimal
idComanda Int
comanda comanda @relation(fields: [idComanda],references: [id])
}

enum metodoPago {
  efectivo
  tarjeta
}

model detalleComanda {
  idComanda Int
  idProducto Int
  cantidad Int
  comanda comanda @relation(fields: [idComanda], references: [id])
  producto producto @relation(fields: [idProducto], references: [id])
  @@id([idComanda,idProducto])
}


